
========
存储：1.内存存储 2.文件存储 3.数据库存储

redis 学习总结：key-value 数据库(BSD)
1.redis支持数据的持久化，可以将内存中的数据保存在磁盘上，重启的时候可以再次加载
2.提供list,set ,zset ,hash等结构的存储
3.支持数据的备份，即master-slave模式的数据备份
4.单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。

检查redis服务器系统进程
kaichangzhu@bogon:~$ ps -aux|grep redis
检查Redis服务器状态
kaichangzhu@bogon:~$ netstat -nlt|grep 6379

sudo /etc/init.d/redis-server status

通过命令行客户端访问Redis
在本机输入redis-cli命令就可以启动，客户端程序访问Redis服务器。

Redis数据备份和恢复
备份
redis 127.0.0.1:6379> SAVE 该命令将在redis安装目录中创建dump.rdb文件
数据恢复
只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令，如下所示： 
redis 127.0.0.1:6379> CONFIG GET dir
1) "dir"
2) "/usr/local/redis/bin"
以上命令 CONFIG GET dir 输出的 redis 安装目录为 /usr/local/redis/bin
 
Bgsave
创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行
127.0.0.1:6379> BGSAVE

密码设置
CONFIG get requirepass（检查密码）
127.0.0.1:6379> CONFIG set requirepass "XXXXX"(设置密码)

Redis性能检测
Redis 性能测试是通过同时执行多个命令实现的。
redis-benchmark [option] [option value]

以下实例同时执行 10000 个请求来检测性能
redis-benchmark -n 10000

redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 10000 -q

SET: 146198.83 requests per second
LPUSH: 145560.41 requests per second
以上实例中主机为 127.0.0.1，端口号为 6379，执行的命令为 set,lpush，请求数为 10000，通过 -q 参数让结果只显示每秒执行的请求数。

客户端连接：
最大连接数(可以修改)maxclients 的默认值是 10000;可以在 redis.conf 中对这个值进行修改。
config get maxclients
1) "maxclients"
2) "10000"


以下实例我们在服务启动时设置最大连接数为 100000：
redis-server --maxclients 100000

Redis管道技术:
Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。

查看 redis 管道，只需要启动 redis 实例并输入以下命令：
$(echo -en "PING\r\n SET runoobkey redis\r\nGET runoobkey\r\nINCR visitor\r\nINCR visitor\r\nINCR visitor\r\n"; sleep 10) | nc localhost 6379

master/slave(主写从读)

redis --->单进程 c 
默认16个数据库(默认下标0---15)(selcet 下标切换数据库)（select 0）
DBSIZE 查看数据库的key的数量
FLUSHDB 清除当前库
FLUSHALL 清楚所有库

redis五大数据类型{
1.String(字符串)
2.Hash(哈希(类似map))
3.Lish(列表)（双向的，前后都可以加）
4.Set(集合)(无序，无重复)
5.Zset(有序集合)(会关联一个double类型的分数)(游戏中分数)

strings类型是二进制安全的，意思是redis的string可以包含任意数据。

http://redisdoc.com/命令组合 
1+5(key + value)

key{
1.keys *
2.exists key
3.expire key 秒:给定的key设置过期时间
4.ttl key 查看还有多少秒过期，-1表示永不过期，-2已过期(过期自动移除，不存在了)
5.type key 查看key是什么类型
}


字符串string{
1.set/get/del/append/strlen
 
append +key +字符串
strlen +key value值的长度

2.Incr/decr/incrby/decrby 一定要是数字才能进行加减
Incr key -->加 1
incrby +key +增量

3.getrange/setrange
getrange：获取指定区间范围内的值(从零到负一表示全部)
set key5 abcd1234
getrange key5 0 -1
getrange key5 0 2 (abc)

setrange：设置指定区间范围的值，格式 setrange key值 具体值

setrange key5 1 xxx
get key5(axxx1234)

4.setex(set with expire)+键秒+值/setnx(set if not exist)
setex key5 10 abcd1234

setnx k1 v11 

5.mset/mget/msetnx(m-->more(多个))
mset k1 v1 k2 v2
mget k1 k2 
msetnx k4 v4 k5 v5（前提k4,k5均不存在才能成功）

}

redis列表(LIST){
1.常用
2.单值多value
3.案例{
	LPUSH/RPUSH/LRANGE（左栈右队列）	
	LPOP/RPOP
	lindex,按照索引下标获得元素(从上到下)
	....	
	}

}








持久化？什么是？（rdb，aof）[面试亮点]（两者可以共存）
RDB -->redis databases;
AOF -->append only file;文件（被破坏则redis不能起来）

在指定的时间间隔内将内存中的数据快照写入磁盘，
也就是行话讲的Snapshot快照，它恢复时将快照文件直接读到内存中。
Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入一个临时文件中。

AOF 是什么？以日志的形式来记录每个写操作，将redis执行的所有的写指令记录下来
（读操作不记录）
RDB和AOF可以共存，AOF优先。AOF被破坏则redis无法启动，但是AOF文件可以修复，
redis-check-aof --fix appendonly.aof（修复）
 AOF配置策略？


事物？
什么是事物？
怎么玩？
redis对事物的支持不完全支持。{
1.一个错误全体连坐，都不执行(体现在命令入队失败)
2.冤头债主，对的执行，错误的抛出(前提是命令入队成功)
}

watch监控（类似乐观锁）{
    乐观锁（常用的，版本号？）利用版本号比较机制，只是在读数据的时候，将读到的数据的版本号一起读出来，当对数据的操作结束后，准备写数据的时候，在进行一次数据版本的比较，若版本号没有变化，即认为数据是一致的，没有更改，可以直接写入，若版号有变化，则认为数据被更新，不能写入，防止脏写数据。
    悲观锁（认为数据一定会被修改，所以去拿去数据的时候，就会加锁）
 

}


mater/slave主从复制
是什么？{
主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slave机制
mater以写为主，slave以读为主。
}
能干嘛？{
1.读写分离
2.容灾恢复
}

怎么玩？{
1.配从(库)不配主(库)
2.从库配置:slaveof 主库IP 主库端口号{
	每次与master断开之后，都需要重新连接，除非配置进redis.conf文件 
	info replication(查看信息)
	}
3.修改配置文件细节操作{
	1.拷贝多个redis.conf文件
	2.开启daemonize yes
	3.pid文件名字
	4.指定端口号
	5.log文件名字
	6.dump名字
	}
4.常用3招{
	info replication(查看信息)
	1.一主二仆{
		1.一个master两个slave
		2.日志查看
		3.问题演示{
		  1.主机断开连接，从机角色不变，原地待命
		  2.从机断开连接，需要与主机重新连接		     			  3.从机只能读取，主机可读，可写 		
		}	
		
	}
	2.薪火相传{
		1.上一个slave可以是下一个slave的master，slave同样也可以接收slaves的连接和同步请求，那么该slave作为了中的下一个的master，可以有效减轻master的写压力。
		2.中途变更转向：会清除之前的数据，重新建立拷贝最新的
		3.slaveof 新的主库ip 新的主库端口
	
	}
	3.反客为主{
	        1.主机挂掉了，在从机中选出新的领导（slave no one）使当前的数据库停止与其他数据库的同步，转成主库
		2.主机重新恢复了，与其他库没有关系了。
	}

}
5.复制原理{
	slave启动成功连接到master后会发送一个sync命令;
	master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，已完成一次完全同步。
	全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。
	增量复制：master继续将新的所有收集到的修改命令依次传给slave，完成同步，但是只要是重新连接master,一次完全同步(全量复制)将被自动执行	
	

	}
6.哨兵模式(sentinel){
	1.是什么{
	反客为主的自动版本，能够后台监控主机是否故障，如果故障了，根据投票数自动将从库转换为主库。			
		}
	2.怎么玩{
		1.调整结构。6379带着6380、6381
		2.自定的/myredis目录下新建sentinel.conf文件，名字不能错
		3.配置哨兵，填写内容{
		     sentinel monitor 被监控主机名字(自己起名字)127.0.0.1 6379 1
		     上面的1表示，主机挂掉后salve投票看让谁接替称为主机，得票多少后成为主机。					
			}
		4.启动哨兵{
			redis-sentinel /myredis/sentinel.conf(目录视实际情况而配)		redis-sentinel->redis-server
			
			}
		5.正常主从演示
		6.原有的master挂掉了，在从机中投票选择新的master，info replication查查看。
		7.问题：如果之前的master重启回来，会不会双master冲突？{
		不会冲突，被哨兵监控会成为新的master的slave			
			}
		
		}
	3.一组sentinel能同时监控多个master

     }
7.复制的缺点{ 复制延迟
	由于所有的写操作都是在master上操作，然后同步更新到slave上，所以从master到slave机器存在一定的延迟，当系统很烦忙的时候，延迟问题会更加严重，slave机器数量增加也会使得这个问题更加严重。


	}		


}








































































