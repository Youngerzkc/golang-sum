return 总结:
A:无名返回值的情况
B:有名返回值的情况

`A:对于无名返回值的情况
func main() {
	fmt.Println("return:", a()) // 打印结果为 return: 0
}

func a() int {
	var i int
	defer func() {
		i++
		fmt.Println("defer2:", i) // 打印结果为 defer: 2
	}()
	defer func() {
		i++
		fmt.Println("defer1:", i) // 打印结果为 defer: 1
	}()
	return i
}
a()int 函数的返回值没有被提前声名，其值来自于其他变量的赋值，而defer中修改的也是其他变量，而非返回值本身，因此函数退出时返回值并没有被改变。
`



`
对于有名返回值的情况如下：
改写规则是将return语句分开成两句写，return xxx会被改写成:

返回值 = xxx

调用defer函数

空的return


先看example1。它可以改写成这样:

func f() (result int) { 

    result = 0 //return语句不是一条原子调用，return xxx其实是赋值＋RET指令 

    func() { //defer被插入到return之前执行，也就是赋返回值和RET指令之间 

        result++ 

    }() 

    return

}

所以这个返回的是1


再看example2。它可以改写成这样：

func f() (r int) { 

    t := 5 

    r = t //赋值指令 

    func() { //defer被插入到赋值与返回之间执行，这个例子中返回值r没被修改过 

        t = t + 5 

    } 

    return //空的return指令

}

所以这个的结果是5


最后看example3。它改写后变成：

func f() (r int) { 

    r = 1 //给返回值赋值 

    func(r int) { //这里改的r是传值传进去的r，不会改变要返回的那个r值 

        r = r + 5 

    }(r) 

    return //空的return

}

所以这个例子结果是1
结论：defer确实是在return之前调用的。但表现形式上却可能不像。本质原因是return xxx语句并不是一条原子指令，defer被插入到了赋值 与 RET之前，因此可能有机会改变最终的返回值。`