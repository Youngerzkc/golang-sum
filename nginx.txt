http://nginx.org/en/docs(nginx官网)
学习三大主线

nginx是什么？
nginx能干嘛？
nginx怎么玩？

nginx是一个高性能的web服务器(专门提供网页或者网站的服务)，是一个高性能的http和反向
代理服物器，也是（imap）一个代理服务器（俄罗斯）
分为四大篇：基础、应用、优化
基础篇
1.安装、编译，控制使用
基本用法：
nginx基本构架 master(主进程)和work(进程)
信号控制（官网查看最全的）
kill -INT pid(用法)
TERM ，INT quick shutdown
QUIT 优雅的关闭进程，即等请求结束后在关闭
HUB 改变配置文件，平滑的重读配置文件
USR1 重读日志文件，在日志分割时有用
USR2 平滑的升级

配置段
//全局区
worker_processes 1;一个工作的子进程，可以进行修改，但是
太大无益，一般设置为CPU数×核数

events {
    //一般是配置nginx的连接特性
    //如一个work能同时允许多少连接
    worker_connections 768;//这是一个子进程最大允许连接7658个连接       # multi_accept on;
}
http {
    //基于域名的虚拟主机配置
    server{
      listen 80;
      server_name z.com;
      location /{ //定位，把特殊的路径或文件再次定位，如image目录须单独处理
                  //如php单独处理
          root z.com;(相对nginx路径)
          index index.html;
      }
    }
    //基于端口的虚拟主机的配置
    server{
        listen 2022;
        server_name z.com;
        location /{
            root /var/www/html;（路径）
            index index.html;
        }
    }
    //基于ip的虚拟主机配置
    server{
        listen 80;
        server_name 192.168.0.100;
        location /{
            root html/ip;//（路径）
            index index.html;
        }
    }
}

日志管理(运维)

nginx的server段可以看到如下类似信息
#access_log logs/host.access_log main;
这说明该server，他的访问日志文件 logs/host.access_log，
使用的格式main格式;
main格式是什么?  log_format main .....
main格式是我们定义好的一种日志的格式，并起个名字，便于引用以上的
远程ip 远程用户/用户时间 请求方法 请求body长度  referer(来源信息,在哪里找的)
http-url-agent 用户代理/蜘蛛(爬虫了)，被转发的请求的原始IP
http_x_forwarded_for 在经过代理时所转发的ip

nginx可以针对不同的server做不同的log(有的web服务器不支持)

date -s "2018-01-30 18:00:00
date -d yesterday
date -d yesterday +%Y%m%d (格式化时间)
日志处理

日志切割：（以昨天的日志为单独一个文件）
{
#!/bin/sh
LOGPATH=/etc/nginx/logs/z.com.access.log
BASEPATH=/var/log/$(date -d yesterday +%Y%m )
mkdir -p $BASEPATH
bak=$BASEPATH/$(date -d yesterday +%Y%m%d%H%M).z.como.access.log
#echo $bak
#mkdir $BASEPATH/$(date -d yesterday +%Y%m) 
mv $LOGPATH $bak
touch $LOGPATH
kill -USR1 `cat /run/nginx.pid ` #发信号

}
linux 下做定时任务
crontab -e
中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”
正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。
同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次 
 分 时 日 月 周 命令
×/1 × × × × 

location 命中原则(url解析)
1.先判断精准命中，如果命中立即返回结果，并结束。
2.判断普通命中，如果有多个命中，记录最长的命中结果，但不返回。
3.继续判断正则表达式的解析结果，按配置里的正则表达式顺序为准，由上往下开始匹配，一旦匹配成功一个，就立即返回结果，并结束其过程。
延伸分析：
普通命中，顺序无所，按照命中长短 
正则命中，与顺序有关；

rewirte(URL重写)
rewrite规则
if (条件){ //注意语法，空格
}


nginx+PHP编译
apache一般是把php当作一个模块来启动，
而nginx则是把http请求变量（get，user_agent)转发给PHP进程，即PHP独立
进程，与nginx进行通信，称为fastcgi运行方式
因此，为apache所编译的php，是不能用于nginx的。

注意，我们编译的PHP要有如下功能
连接mysql，gd，ttf，

提升性能{
    1.压缩（注意图片，二进制文件不适合压缩，因为压缩比很小，而且压缩浪费cpu资源）
    2.expires缓存在浏览器客户端（针对与图片）
}

#！nginx反向代理和负载均衡
支持两个用法 proxy和upstream，分别用来做反向代理，和负载均衡。
以反向代理为例，nginx不自己处理php的相关请求，而把php的相关请求转发给apache来处理。就是把请求交给别人来处理。
反向代理后端如果有多台服务器，自然可以形成负载均衡，但是proxy_pass如何指向多台服务器呢？
把多台服务器用up_stream 指定绑定在一起并起个组名，然后proxy_pass指向该组。


高性能的服务器的架设{
    一方面减少响应请求
    1.合并css，背景图片，减少mysql查询
    2.对于运维的nginx的expires，利用浏览器缓存等，减少查询
    3.利用cdn来响应请求
!!! 4.最终剩下的，不可避免的请求-----服务器集群+负载均衡来支撑
}
到了第四步后，就不要考虑减少请求这个方向了，而是思考如何更好的响应高并发请求？
既然响应是无可避免的，我们要做的是把工作内容平均分给每台服务器，最理想的状态是，每台服务器的性能都充分利用。


优化思路：
nginx响应请求{
    1.建立socket连接  dmesg|tail ---->
    2.打开文件，并socket返回 (日志) ----> ulimit -n xxxxx
}
排查问题，注意观察这两点。主要从系统的dmesg和errlog来观察。

高并发思路{
    1.socket{
         1.系统层面 {
             1.最大连接数 somaxconn ---->/proc/sys/net/core/somaxconn 50000 修改较大为好(注意proc文件的理解)
             2.是否加快tcp连接的回收，recycle ---->/proc/sys/net/ipv4/tcp_tw_recycle 修改为1
             3.空的tcp是否允许回收利用。------>/proc/sys/net/ipv4/tcp_tw_reuse 修改为1
             5.洪水攻击--->不做洪水抵御 ----》 /proc/sys/net/ipv4/tcp_syncookies 修改为0
         }
         2.nginx {
             1.每个子进程允许打开的连接(worker_connections)
             2.http连接快速关闭 keep_alivetime:0 (高并发网站中)
         }
    }
    2.打开文件{
        1.nginx{
            1.子进程允许打开的文件 ---->worker_rlimit_nofile 10000
        }
        2.系统层面{
            1.ulimit -n ---》设置一个较大的值
        }
    }
}
ab 进行并发测试 失败请求个数，以及请求处理时间。
ab -c 10000 -n 2000000 url 
10000个并发，2000000次请求

nginx单击1w并发优化。nginx编辑添加监控模块 编译 --with-http_stub_status_module
1.ab 测试 
ab -c 10000 -n 2000000 127.0.0.1/index.html
2.
ab -c 10000 -n 2000000 -k  127.0.0.1/index.html

keep-alive {
    http 1.0 client 和server 请求->应答 断开
    http 1.1 添加keep-alive 防止频繁建立连接，但是在高并发网站中慎用，tcp回收很重要
}



现阶段遇到的问题？
nginx内部变量不能引用($)---》未解决！



























